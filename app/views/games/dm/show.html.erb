<div class="game-play-container">
  <div class="game-info">
    <h1><%= @game.name %> - Game Control (Debug)</h1>
    <p class="text-muted">
      This is a debug interface for controlling the game. In the future, an AI agent will handle these DM functions.
    </p>

    <div class="message-filter mb-3">
      <label>Filter Messages:</label>
      <select id="message-filter" class="form-select" onchange="filterMessages()">
        <option value="all">All Messages</option>
        <option value="private">Private Messages (No Area)</option>
        <% @areas.each do |area| %>
          <option value="area-<%= area.id %>"><%= area.name %></option>
        <% end %>
      </select>
    </div>
  </div>

  <%= turbo_stream_from "game_#{@game.id}_dm_messages" %>

  <div class="chat-container">
    <div id="messages" class="messages" data-controller="auto-scroll">
      <%= render partial: 'games/messages/message', collection: @messages, locals: { is_dm_view: true } %>
    </div>

    <div class="message-form">
      <%= form_with model: [@game, @message], url: game_dm_messages_path(@game), local: false,
                    data: { controller: "message-form" } do |f| %>
        <div class="form-group mb-2">
          <label>Send to:</label>
          <select name="message[target_type]" class="form-select" data-action="change->message-form#toggleTargetSelect">
            <option value="area">Area</option>
            <option value="character">Specific Character</option>
            <option value="all">All Characters</option>
          </select>
        </div>

        <div class="form-group mb-2" data-message-form-target="areaSelect">
          <%= f.select :area_id, options_from_collection_for_select(@areas, :id, :name),
                       { include_blank: "Select an area" },
                       class: "form-select" %>
        </div>

        <div class="form-group mb-2 d-none" data-message-form-target="characterSelect">
          <select name="message[target_character_id]" class="form-select">
            <option value="">Select a character</option>
            <% @characters.each do |character| %>
              <option value="<%= character.id %>">
                <%= character.name %><%= character.area ? " (#{character.area.name})" : " (No area)" %>
              </option>
            <% end %>
          </select>
        </div>

        <div class="form-group mb-2">
          <label>Message Type:</label>
          <%= f.select :message_type, options_for_select([["Chat", "chat"], ["System", "system"], ["Action", "action"]], "system"),
                       {}, class: "form-select" %>
        </div>

        <div class="input-group">
          <%= f.text_field :content,
                           class: "form-control",
                           placeholder: "Type your message...",
                           data: { action: "keydown.enter->message-form#submit" } %>
          <%= f.submit "Send", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener("turbo:load", () => {
  const controller = document.querySelector('[data-controller="message-form"]');
  if (controller) {
    const targetSelect = controller.querySelector('select[name="message[target_type]"]');
    const areaSelect = controller.querySelector('[data-message-form-target="areaSelect"]');
    const characterSelect = controller.querySelector('[data-message-form-target="characterSelect"]');

    targetSelect.addEventListener('change', (e) => {
      areaSelect.classList.add('d-none');
      characterSelect.classList.add('d-none');

      if (e.target.value === 'area') {
        areaSelect.classList.remove('d-none');
      } else if (e.target.value === 'character') {
        characterSelect.classList.remove('d-none');
      }
    });
  }
});
</script>

<script>
function filterMessages() {
  const filterValue = document.getElementById('message-filter').value;
  const messages = document.querySelectorAll('#messages .message');

  messages.forEach(message => {
    if (filterValue === 'all') {
      message.style.display = 'block';
    } else if (filterValue === 'private') {
      // Show only messages without area
      if (!message.dataset.areaId || message.dataset.areaId === '') {
        message.style.display = 'block';
      } else {
        message.style.display = 'none';
      }
    } else if (filterValue.startsWith('area-')) {
      // Show only messages from specific area
      const areaId = filterValue.replace('area-', '');
      if (message.dataset.areaId === areaId) {
        message.style.display = 'block';
      } else {
        message.style.display = 'none';
      }
    }
  });
}
</script>